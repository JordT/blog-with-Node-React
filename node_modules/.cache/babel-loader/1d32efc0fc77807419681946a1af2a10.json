{"ast":null,"code":"var _jsxFileName = \"/Users/jordanthomson/code/blog-with-Node-React/src/client/components/DBGetForm/DBGetForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./DBGetForm.css\";\nimport axios from \"axios\";\nimport DisplayBlog from '../DisplayBlog/DisplayBlog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DBPostForm(props) {\n  _s();\n\n  var [getName, setGetName] = React.useState(\"\"); // var [name, setName] = React.useState([\"test1\", \"test2\"]); // mock data for testing\n\n  var [city, setCity] = React.useState(\"\");\n  const [blogData, setBlogData] = React.useState([]);\n\n  const dbGet = getName => {\n    axios.get(`http://localhost:3001/blogger/${getName}`).then(res => {\n      const data = res.data;\n      const objArr = [];\n      data.map(arr => {\n        objArr.push({\n          SampName: arr.name,\n          SampCity: arr.city,\n          SampBlog: arr.blog\n        });\n      });\n      setBlogData(objArr);\n    });\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dbGet(getName);\n  };\n\n  const displayBlogs = (data, i) => {\n    //mapping through an array of objects to allow mutliple blogs to be returned.\n    const render = [];\n    data.map(blogData => {\n      return render.push( /*#__PURE__*/_jsxDEV(DisplayBlog, {\n        nameprop: blogData.SampName,\n        cityprop: blogData.SampCity,\n        blogprop: blogData.SampBlog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }, this));\n    });\n    return render;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DBGetForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Get a record from the database:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Blogger ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"id\",\n          name: \"getName\",\n          value: getName,\n          onChange: n => setGetName(n.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dbDisplay\",\n      children: \"Name:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dbDisplay\",\n      children: \"City:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), displayBlogs(blogData)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DBPostForm, \"s2SVyq1PzQNbSHh+Yp5TP3o3GEs=\");\n\n_c = DBPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DBPostForm\");","map":{"version":3,"sources":["/Users/jordanthomson/code/blog-with-Node-React/src/client/components/DBGetForm/DBGetForm.js"],"names":["React","axios","DisplayBlog","DBPostForm","props","getName","setGetName","useState","city","setCity","blogData","setBlogData","dbGet","get","then","res","data","objArr","map","arr","push","SampName","name","SampCity","SampBlog","blog","handleSubmit","e","preventDefault","displayBlogs","i","render","n","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAExC,MAAI,CAACC,OAAD,EAAUC,UAAV,IAAwBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA5B,CAFwC,CAGxC;;AACA,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACO,QAAN,CAAe,EAAf,CAAtB;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BX,KAAK,CAACO,QAAN,CAAe,EAAf,CAAhC;;AAGA,QAAMK,KAAK,GAAIP,OAAD,IAAa;AACzBJ,IAAAA,KAAK,CACFY,GADH,CACQ,iCAAgCR,OAAQ,EADhD,EAEGS,IAFH,CAESC,GAAD,IAAS;AAEb,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACA,YAAMC,MAAM,GAAG,EAAf;AAEAD,MAAAA,IAAI,CAACE,GAAL,CAAUC,GAAD,IAAS;AAChBF,QAAAA,MAAM,CAACG,IAAP,CAAY;AACVC,UAAAA,QAAQ,EAAEF,GAAG,CAACG,IADJ;AAEVC,UAAAA,QAAQ,EAAEJ,GAAG,CAACX,IAFJ;AAGVgB,UAAAA,QAAQ,EAAEL,GAAG,CAACM;AAHJ,SAAZ;AAKD,OAND;AAOAd,MAAAA,WAAW,CAACM,MAAD,CAAX;AACD,KAfH;AAgBD,GAjBD;;AAmBA,QAAMS,YAAY,GAAIC,CAAD,IAAO;AAC1BA,IAAAA,CAAC,CAACC,cAAF;AACAhB,IAAAA,KAAK,CAACP,OAAD,CAAL;AACD,GAHD;;AAKA,QAAMwB,YAAY,GAAG,CAACb,IAAD,EAAOc,CAAP,KAAa;AAChC;AACA,UAAMC,MAAM,GAAG,EAAf;AACAf,IAAAA,IAAI,CAACE,GAAL,CAAUR,QAAD,IAAc;AACrB,aAAOqB,MAAM,CAACX,IAAP,eAAY,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEV,QAAQ,CAACW,QAAhC;AAA0C,QAAA,QAAQ,EAAEX,QAAQ,CAACa,QAA7D;AAAuE,QAAA,QAAQ,EAAEb,QAAQ,CAACc;AAA1F;AAAA;AAAA;AAAA;AAAA,cAAZ,CAAP;AACD,KAFD;AAGA,WAAOO,MAAP;AACD,GAPD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEL,YAAhB;AAAA,8BACE;AAAA,+CAEE;AACE,UAAA,IAAI,EAAC,IADP;AAEE,UAAA,IAAI,EAAC,SAFP;AAGE,UAAA,KAAK,EAAErB,OAHT;AAIE,UAAA,QAAQ,EAAG2B,CAAD,IAAO1B,UAAU,CAAC0B,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ7B;AAKE,UAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAkBE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,EAqBGL,YAAY,CAACnB,QAAD,CArBf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GAlEuBP,U;;KAAAA,U","sourcesContent":["import React from \"react\";\nimport \"./DBGetForm.css\";\nimport axios from \"axios\";\nimport DisplayBlog from '../DisplayBlog/DisplayBlog'\n\nexport default function DBPostForm(props) {\n\n  var [getName, setGetName] = React.useState(\"\");\n  // var [name, setName] = React.useState([\"test1\", \"test2\"]); // mock data for testing\n  var [city, setCity] = React.useState(\"\");\n  const [blogData, setBlogData] = React.useState([])\n\n\n  const dbGet = (getName) => {\n    axios\n      .get(`http://localhost:3001/blogger/${getName}`)\n      .then((res) => {\n\n        const data = res.data\n        const objArr = []\n\n        data.map((arr) => {\n          objArr.push({\n            SampName: arr.name,\n            SampCity: arr.city,\n            SampBlog: arr.blog\n          })\n        })\n        setBlogData(objArr)\n      }); \n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();   \n    dbGet(getName);\n  };\n  \n  const displayBlogs = (data, i) => {\n    //mapping through an array of objects to allow mutliple blogs to be returned.\n    const render = []\n    data.map((blogData) => {\n      return render.push(<DisplayBlog nameprop={blogData.SampName} cityprop={blogData.SampCity} blogprop={blogData.SampBlog} />) \n    })\n    return render;\n  }\n\n  return (\n    <div className=\"DBGetForm\">\n      <h3>Get a record from the database:</h3>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Blogger ID:\n          <input\n            type=\"id\"\n            name=\"getName\"\n            value={getName}\n            onChange={(n) => setGetName(n.target.value)}\n            required\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div className=\"dbDisplay\">\n        Name:\n      </div>\n      <div className=\"dbDisplay\">\n        City:\n      </div>\n      {displayBlogs(blogData)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}