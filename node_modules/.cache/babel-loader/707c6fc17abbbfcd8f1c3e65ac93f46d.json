{"ast":null,"code":"var _jsxFileName = \"/Users/jordanthomson/code/blog-with-Node-React/src/client/components/DBGetForm/DBGetForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./DBGetForm.css\";\nimport axios from \"axios\";\nimport DisplayBlog from '../DisplayBlog/DisplayBlog';\nimport { render } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DBPostForm(props) {\n  _s();\n\n  //improvement suggestion - could our state could be stored directly in a blogger object?\n  var [id, setID] = React.useState(\"\");\n  var [name, setName] = React.useState([\"test1\", \"test2\"]); // mock data for testing\n\n  var [city, setCity] = React.useState(\"\"); // sample input object\n\n  const sampData = [{\n    SampName: \"Test1\",\n    SampCity: \"test1\"\n  }, {\n    SampName: \"Test2\",\n    SampCity: \"Test2\"\n  }];\n\n  const dbGet = id => {\n    axios.get(`http://localhost:3001/blogger/${id}`).then(res => {\n      // console.log(response.headers.name + \"we're logging line 17\")\n      setName(res.data.name);\n      setCity(res.data.city); // setName(res.name);\n    }); // return console.log(response + \" on line 20\");\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dbGet(id); // No logo on the submit blog page so I have removed it.\n    // props.logoSpeedUp();\n  };\n\n  const displayBlogs = (sampData, i) => {\n    // correctly maps and displays name as an [] when you pass in name array\n    // console.log(name)\n    // const render = []\n    // name.map((name)=>{ \n    //   return render.push(<DisplayBlog nameprop={name} cityprop={city} />)\n    // })\n    // return render\n    //mapping through an array of objects to allow mutliple blogs to be returned.\n    const render = [];\n    sampData.map((sampData, i) => {\n      console.log(sampData.SampName);\n      return render.push( /*#__PURE__*/_jsxDEV(DisplayBlog, {\n        nameprop: sampData.SampName,\n        cityprop: sampData.SampCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 26\n      }, this));\n    });\n    return render;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DBGetForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Get a record from the database:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Blogger ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"id\",\n          name: \"id\",\n          value: id,\n          onChange: n => setID(n.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dbDisplay\",\n      children: [\"Name: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dbDisplay\",\n      children: [\"City: \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), displayBlogs(sampData)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DBPostForm, \"oRbvXlGtWSvnSwZk85AHYufDzzk=\");\n\n_c = DBPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DBPostForm\");","map":{"version":3,"sources":["/Users/jordanthomson/code/blog-with-Node-React/src/client/components/DBGetForm/DBGetForm.js"],"names":["React","axios","DisplayBlog","render","DBPostForm","props","id","setID","useState","name","setName","city","setCity","sampData","SampName","SampCity","dbGet","get","then","res","data","handleSubmit","event","preventDefault","displayBlogs","i","map","console","log","push","n","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,wBAAvB;;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAAA;;AAExC;AACA,MAAI,CAACC,EAAD,EAAKC,KAAL,IAAcP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAAlB;AACA,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBV,KAAK,CAACQ,QAAN,CAAe,CAAC,OAAD,EAAU,OAAV,CAAf,CAAtB,CAJwC,CAIkB;;AAC1D,MAAI,CAACG,IAAD,EAAOC,OAAP,IAAkBZ,KAAK,CAACQ,QAAN,CAAe,EAAf,CAAtB,CALwC,CAOxC;;AACA,QAAMK,QAAQ,GAAG,CACf;AAACC,IAAAA,QAAQ,EAAE,OAAX;AACAC,IAAAA,QAAQ,EAAE;AADV,GADe,EAGf;AAACD,IAAAA,QAAQ,EAAE,OAAX;AACAC,IAAAA,QAAQ,EAAE;AADV,GAHe,CAAjB;;AAMA,QAAMC,KAAK,GAAIV,EAAD,IAAQ;AACpBL,IAAAA,KAAK,CACFgB,GADH,CACQ,iCAAgCX,EAAG,EAD3C,EAEGY,IAFH,CAESC,GAAD,IAAS;AACb;AACAT,MAAAA,OAAO,CAACS,GAAG,CAACC,IAAJ,CAASX,IAAV,CAAP;AACAG,MAAAA,OAAO,CAACO,GAAG,CAACC,IAAJ,CAAST,IAAV,CAAP,CAHa,CAIb;AACD,KAPH,EADoB,CASlB;AACH,GAVD;;AAYA,QAAMU,YAAY,GAAIC,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACC,cAAN;AACAP,IAAAA,KAAK,CAACV,EAAD,CAAL,CAF8B,CAG9B;AACA;AACD,GALD;;AAOA,QAAMkB,YAAY,GAAG,CAACX,QAAD,EAAWY,CAAX,KAAiB;AACpC;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,UAAMtB,MAAM,GAAG,EAAf;AAEAU,IAAAA,QAAQ,CAACa,GAAT,CAAa,CAACb,QAAD,EAAWY,CAAX,KAAiB;AAC5BE,MAAAA,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACC,QAArB;AACA,aAAOX,MAAM,CAAC0B,IAAP,eAAY,QAAC,WAAD;AAAa,QAAA,QAAQ,EAAEhB,QAAQ,CAACC,QAAhC;AAA0C,QAAA,QAAQ,EAAED,QAAQ,CAACE;AAA7D;AAAA;AAAA;AAAA;AAAA,cAAZ,CAAP;AACD,KAHD;AAIA,WAAOZ,MAAP;AACD,GAlBD;;AAoBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,QAAQ,EAAEkB,YAAhB;AAAA,8BACE;AAAA,+CAEE;AACE,UAAA,IAAI,EAAC,IADP;AAEE,UAAA,IAAI,EAAC,IAFP;AAGE,UAAA,KAAK,EAAEf,EAHT;AAIE,UAAA,QAAQ,EAAGwB,CAAD,IAAOvB,KAAK,CAACuB,CAAC,CAACC,MAAF,CAASC,KAAV,CAJxB;AAKE,UAAA,QAAQ;AALV;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,cAXF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAeE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,2BACSvB,IADT;AAAA;AAAA;AAAA;AAAA;AAAA,YAfF,eAkBE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,2BACSE,IADT;AAAA;AAAA;AAAA;AAAA;AAAA,YAlBF,EAqBGa,YAAY,CAACX,QAAD,CArBf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GA9EuBT,U;;KAAAA,U","sourcesContent":["import React from \"react\";\nimport \"./DBGetForm.css\";\nimport axios from \"axios\";\nimport DisplayBlog from '../DisplayBlog/DisplayBlog'\nimport { render } from \"@testing-library/react\";\n\nexport default function DBPostForm(props) {\n\n  //improvement suggestion - could our state could be stored directly in a blogger object?\n  var [id, setID] = React.useState(\"\");\n  var [name, setName] = React.useState([\"test1\", \"test2\"]); // mock data for testing\n  var [city, setCity] = React.useState(\"\");\n\n  // sample input object\n  const sampData = [\n    {SampName: \"Test1\",\n    SampCity: \"test1\"},\n    {SampName: \"Test2\",\n    SampCity: \"Test2\"},\n  ]\n  const dbGet = (id) => {\n    axios\n      .get(`http://localhost:3001/blogger/${id}`)\n      .then((res) => {\n        // console.log(response.headers.name + \"we're logging line 17\")\n        setName(res.data.name);\n        setCity(res.data.city);\n        // setName(res.name);\n      });\n      // return console.log(response + \" on line 20\");\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();   \n    dbGet(id);\n    // No logo on the submit blog page so I have removed it.\n    // props.logoSpeedUp();\n  };\n  \n  const displayBlogs = (sampData, i) => {\n    // correctly maps and displays name as an [] when you pass in name array\n    // console.log(name)\n    // const render = []\n\n    // name.map((name)=>{ \n    //   return render.push(<DisplayBlog nameprop={name} cityprop={city} />)\n    // })\n    // return render\n\n    //mapping through an array of objects to allow mutliple blogs to be returned.\n    const render = []\n\n    sampData.map((sampData, i) => {\n      console.log(sampData.SampName)\n      return render.push(<DisplayBlog nameprop={sampData.SampName} cityprop={sampData.SampCity} />) \n    })\n    return render\n  }\n\n  return (\n    <div className=\"DBGetForm\">\n      <h3>Get a record from the database:</h3>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Blogger ID:\n          <input\n            type=\"id\"\n            name=\"id\"\n            value={id}\n            onChange={(n) => setID(n.target.value)}\n            required\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div className=\"dbDisplay\">\n        Name: {name}\n      </div>\n      <div className=\"dbDisplay\">\n        City: {city}\n      </div>\n      {displayBlogs(sampData)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}