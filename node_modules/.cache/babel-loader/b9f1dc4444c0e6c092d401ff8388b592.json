{"ast":null,"code":"const path = require('path');\n\nconst utils = require('./utils');\n\nconst merge = utils.merge;\nconst bus = utils.bus;\n\nconst spawn = require('child_process').spawn;\n\nmodule.exports = function spawnCommand(command, config, eventArgs) {\n  var stdio = ['pipe', 'pipe', 'pipe'];\n\n  if (config.options.stdout) {\n    stdio = ['pipe', process.stdout, process.stderr];\n  }\n\n  const env = merge(process.env, {\n    FILENAME: eventArgs[0]\n  });\n  var sh = 'sh';\n  var shFlag = '-c';\n  var spawnOptions = {\n    env: merge(config.options.execOptions.env, env),\n    stdio: stdio\n  };\n\n  if (!Array.isArray(command)) {\n    command = [command];\n  }\n\n  if (utils.isWindows) {\n    // if the exec includes a forward slash, reverse it for windows compat\n    // but *only* apply to the first command, and none of the arguments.\n    // ref #1251 and #1236\n    command = command.map(executable => {\n      if (executable.indexOf('/') === -1) {\n        return executable;\n      }\n\n      return executable.split(' ').map((e, i) => {\n        if (i === 0) {\n          return path.normalize(e);\n        }\n\n        return e;\n      }).join(' ');\n    }); // taken from npm's cli: https://git.io/vNFD4\n\n    sh = process.env.comspec || 'cmd';\n    shFlag = '/d /s /c';\n    spawnOptions.windowsVerbatimArguments = true;\n  }\n\n  const args = command.join(' ');\n  const child = spawn(sh, [shFlag, args], spawnOptions);\n\n  if (config.required) {\n    var emit = {\n      stdout: function (data) {\n        bus.emit('stdout', data);\n      },\n      stderr: function (data) {\n        bus.emit('stderr', data);\n      }\n    }; // now work out what to bind to...\n\n    if (config.options.stdout) {\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\n    } else {\n      child.stdout.on('data', emit.stdout);\n      child.stderr.on('data', emit.stderr);\n      bus.stdout = child.stdout;\n      bus.stderr = child.stderr;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/jordanthomson/code/blog-with-Node-React/node_modules/nodemon/lib/spawn.js"],"names":["path","require","utils","merge","bus","spawn","module","exports","spawnCommand","command","config","eventArgs","stdio","options","stdout","process","stderr","env","FILENAME","sh","shFlag","spawnOptions","execOptions","Array","isArray","isWindows","map","executable","indexOf","split","e","i","normalize","join","comspec","windowsVerbatimArguments","args","child","required","emit","data","on"],"mappings":"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","sourcesContent":["const path = require('path');\nconst utils = require('./utils');\nconst merge = utils.merge;\nconst bus = utils.bus;\nconst spawn = require('child_process').spawn;\n\nmodule.exports = function spawnCommand(command, config, eventArgs) {\n  var stdio = ['pipe', 'pipe', 'pipe'];\n\n  if (config.options.stdout) {\n    stdio = ['pipe', process.stdout, process.stderr];\n  }\n\n  const env = merge(process.env, { FILENAME: eventArgs[0] });\n\n  var sh = 'sh';\n  var shFlag = '-c';\n  var spawnOptions = {\n    env: merge(config.options.execOptions.env, env),\n    stdio: stdio,\n  };\n\n  if (!Array.isArray(command)) {\n    command = [command];\n  }\n\n  if (utils.isWindows) {\n    // if the exec includes a forward slash, reverse it for windows compat\n    // but *only* apply to the first command, and none of the arguments.\n    // ref #1251 and #1236\n    command = command.map(executable => {\n      if (executable.indexOf('/') === -1) {\n        return executable;\n      }\n\n      return  executable.split(' ').map((e, i) => {\n        if (i === 0) {\n          return path.normalize(e);\n        }\n        return e;\n      }).join(' ');\n    });\n    // taken from npm's cli: https://git.io/vNFD4\n    sh = process.env.comspec || 'cmd';\n    shFlag = '/d /s /c';\n    spawnOptions.windowsVerbatimArguments = true;\n  }\n\n  const args = command.join(' ');\n  const child = spawn(sh, [shFlag, args], spawnOptions);\n\n  if (config.required) {\n    var emit = {\n      stdout: function (data) {\n        bus.emit('stdout', data);\n      },\n      stderr: function (data) {\n        bus.emit('stderr', data);\n      },\n    };\n\n    // now work out what to bind to...\n    if (config.options.stdout) {\n      child.on('stdout', emit.stdout).on('stderr', emit.stderr);\n    } else {\n      child.stdout.on('data', emit.stdout);\n      child.stderr.on('data', emit.stderr);\n\n      bus.stdout = child.stdout;\n      bus.stderr = child.stderr;\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}