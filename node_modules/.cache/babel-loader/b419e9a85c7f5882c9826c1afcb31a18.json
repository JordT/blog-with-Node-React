{"ast":null,"code":"var isCallable = require('../internals/is-callable');\n\nvar isObject = require('../internals/is-object'); // `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\n\n\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = fn.call(input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};","map":{"version":3,"sources":["/Users/jordanthomson/code/blog-with-Node-React/node_modules/core-js-pure/internals/ordinary-to-primitive.js"],"names":["isCallable","require","isObject","module","exports","input","pref","fn","val","toString","call","valueOf","TypeError"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB,C,CAEA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,IAAjB,EAAuB;AACtC,MAAIC,EAAJ,EAAQC,GAAR;AACA,MAAIF,IAAI,KAAK,QAAT,IAAqBN,UAAU,CAACO,EAAE,GAAGF,KAAK,CAACI,QAAZ,CAA/B,IAAwD,CAACP,QAAQ,CAACM,GAAG,GAAGD,EAAE,CAACG,IAAH,CAAQL,KAAR,CAAP,CAArE,EAA6F,OAAOG,GAAP;AAC7F,MAAIR,UAAU,CAACO,EAAE,GAAGF,KAAK,CAACM,OAAZ,CAAV,IAAkC,CAACT,QAAQ,CAACM,GAAG,GAAGD,EAAE,CAACG,IAAH,CAAQL,KAAR,CAAP,CAA/C,EAAuE,OAAOG,GAAP;AACvE,MAAIF,IAAI,KAAK,QAAT,IAAqBN,UAAU,CAACO,EAAE,GAAGF,KAAK,CAACI,QAAZ,CAA/B,IAAwD,CAACP,QAAQ,CAACM,GAAG,GAAGD,EAAE,CAACG,IAAH,CAAQL,KAAR,CAAP,CAArE,EAA6F,OAAOG,GAAP;AAC7F,QAAMI,SAAS,CAAC,yCAAD,CAAf;AACD,CAND","sourcesContent":["var isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\n\n// `OrdinaryToPrimitive` abstract operation\n// https://tc39.es/ecma262/#sec-ordinarytoprimitive\nmodule.exports = function (input, pref) {\n  var fn, val;\n  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;\n  if (isCallable(fn = input.valueOf) && !isObject(val = fn.call(input))) return val;\n  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = fn.call(input))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n"]},"metadata":{},"sourceType":"script"}