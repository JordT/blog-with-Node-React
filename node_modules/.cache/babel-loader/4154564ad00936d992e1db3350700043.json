{"ast":null,"code":"const spawn = require('child_process').spawn;\n\nmodule.exports = function (rootPid, callback) {\n  const pidsOfInterest = new Set([parseInt(rootPid, 10)]);\n  var output = ''; // *nix\n\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', data => {\n    output += data.toString('ascii');\n  });\n  ps.on('close', () => {\n    try {\n      const res = output.split('\\n').slice(1).map(_ => _.trim()).reduce((acc, line) => {\n        const pids = line.split(/\\s+/);\n        const ppid = parseInt(pids[0], 10);\n\n        if (pidsOfInterest.has(ppid)) {\n          const pid = parseInt(pids[1], 10);\n          acc.push(pid);\n          pidsOfInterest.add(pid);\n        }\n\n        return acc;\n      }, []);\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};","map":{"version":3,"sources":["/Users/jordanthomson/code/blog-with-Node-React/node_modules/pstree.remy/lib/tree.js"],"names":["spawn","require","module","exports","rootPid","callback","pidsOfInterest","Set","parseInt","output","ps","stdout","on","data","toString","res","split","slice","map","_","trim","reduce","acc","line","pids","ppid","has","pid","push","add","e"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,KAAvC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,QAAnB,EAA6B;AAC5C,QAAMC,cAAc,GAAG,IAAIC,GAAJ,CAAQ,CAACC,QAAQ,CAACJ,OAAD,EAAU,EAAV,CAAT,CAAR,CAAvB;AACA,MAAIK,MAAM,GAAG,EAAb,CAF4C,CAI5C;;AACA,QAAMC,EAAE,GAAGV,KAAK,CAAC,IAAD,EAAO,CAAC,IAAD,EAAO,IAAP,EAAa,UAAb,CAAP,CAAhB;AACAU,EAAAA,EAAE,CAACC,MAAH,CAAUC,EAAV,CAAa,MAAb,EAAsBC,IAAD,IAAU;AAC7BJ,IAAAA,MAAM,IAAII,IAAI,CAACC,QAAL,CAAc,OAAd,CAAV;AACD,GAFD;AAIAJ,EAAAA,EAAE,CAACE,EAAH,CAAM,OAAN,EAAe,MAAM;AACnB,QAAI;AACF,YAAMG,GAAG,GAAGN,MAAM,CACfO,KADS,CACH,IADG,EAETC,KAFS,CAEH,CAFG,EAGTC,GAHS,CAGJC,CAAD,IAAOA,CAAC,CAACC,IAAF,EAHF,EAITC,MAJS,CAIF,CAACC,GAAD,EAAMC,IAAN,KAAe;AACrB,cAAMC,IAAI,GAAGD,IAAI,CAACP,KAAL,CAAW,KAAX,CAAb;AACA,cAAMS,IAAI,GAAGjB,QAAQ,CAACgB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAArB;;AAEA,YAAIlB,cAAc,CAACoB,GAAf,CAAmBD,IAAnB,CAAJ,EAA8B;AAC5B,gBAAME,GAAG,GAAGnB,QAAQ,CAACgB,IAAI,CAAC,CAAD,CAAL,EAAU,EAAV,CAApB;AACAF,UAAAA,GAAG,CAACM,IAAJ,CAASD,GAAT;AACArB,UAAAA,cAAc,CAACuB,GAAf,CAAmBF,GAAnB;AACD;;AAED,eAAOL,GAAP;AACD,OAfS,EAeP,EAfO,CAAZ;AAiBAjB,MAAAA,QAAQ,CAAC,IAAD,EAAOU,GAAP,CAAR;AACD,KAnBD,CAmBE,OAAOe,CAAP,EAAU;AACVzB,MAAAA,QAAQ,CAACyB,CAAD,EAAI,IAAJ,CAAR;AACD;AACF,GAvBD;AAwBD,CAlCD","sourcesContent":["const spawn = require('child_process').spawn;\n\nmodule.exports = function (rootPid, callback) {\n  const pidsOfInterest = new Set([parseInt(rootPid, 10)]);\n  var output = '';\n\n  // *nix\n  const ps = spawn('ps', ['-A', '-o', 'ppid,pid']);\n  ps.stdout.on('data', (data) => {\n    output += data.toString('ascii');\n  });\n\n  ps.on('close', () => {\n    try {\n      const res = output\n        .split('\\n')\n        .slice(1)\n        .map((_) => _.trim())\n        .reduce((acc, line) => {\n          const pids = line.split(/\\s+/);\n          const ppid = parseInt(pids[0], 10);\n\n          if (pidsOfInterest.has(ppid)) {\n            const pid = parseInt(pids[1], 10);\n            acc.push(pid);\n            pidsOfInterest.add(pid);\n          }\n\n          return acc;\n        }, []);\n\n      callback(null, res);\n    } catch (e) {\n      callback(e, null);\n    }\n  });\n};\n"]},"metadata":{},"sourceType":"script"}