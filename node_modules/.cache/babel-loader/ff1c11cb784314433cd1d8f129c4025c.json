{"ast":null,"code":"var _jsxFileName = \"/Users/jordanthomson/code/blog-with-Node-React/src/client/components/DBGetForm/DBGetForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport \"./DBGetForm.css\";\nimport axios from \"axios\";\nimport DisplayBlog from '../DisplayBlog/DisplayBlog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DBPostForm(props) {\n  _s();\n\n  //improvement suggestion - could our state could be stored directly in a blogger object?\n  var [id, setID] = React.useState(\"\");\n  var [name, setName] = React.useState([\"test1\", \"test2\"]); // mock data for testing\n\n  var [city, setCity] = React.useState(\"\");\n  const [blogData, setBlogData] = React.useState([{\n    SampName: \"test1\",\n    SampCity: \"This is my city\"\n  }, {\n    SampName: \"Test1\",\n    SampCity: \"This is my other city\"\n  }]);\n\n  const dbGet = id => {\n    axios.get(`http://localhost:3001/blogger/${id}`).then(res => {\n      console.log(res);\n      console.log(res.data[0].city);\n      console.log(res.data[1].city);\n      const data = res.data;\n      data.map(arr => {\n        console.log(arr);\n      });\n      console.log(data); // Object.keys(res.data).map((property, i) => {\n      //   // console.log(property.[i])\n      //   console.log(i)\n      //   // Access each object here by using response[property]...\n      // })\n      // setName(res.data.name)\n      // setCity(res.data.city)\n      // create array of objects w/ returned blog data\n\n      const newArray = [];\n      newArray.push({\n        SampName: res.data.name,\n        SampCity: res.data[0].city,\n        SampBlog: \"\"\n      });\n      console.log(newArray);\n      setBlogData(newArray);\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dbGet(id); // No logo on the submit blog page so I have removed it.\n    // props.logoSpeedUp();\n  };\n\n  const displayBlogs = (data, i) => {\n    //mapping through an array of objects to allow mutliple blogs to be returned.\n    const render = [];\n    data.map(blogData => {\n      // console.log(blogData.SampName)\n      return render.push( /*#__PURE__*/_jsxDEV(DisplayBlog, {\n        nameprop: blogData.SampName,\n        cityprop: blogData.SampCity,\n        blogprop: blogData.SampBlog\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 26\n      }, this));\n    });\n    return render;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"DBGetForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Get a record from the database:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Blogger ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"id\",\n          name: \"id\",\n          value: id,\n          onChange: n => setID(n.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dbDisplay\",\n      children: [\"Name: \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dbDisplay\",\n      children: [\"City: \", city]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), displayBlogs(blogData)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DBPostForm, \"7Cjs+kBC1VooEVg1h4AyAYxTTUQ=\");\n\n_c = DBPostForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"DBPostForm\");","map":{"version":3,"sources":["/Users/jordanthomson/code/blog-with-Node-React/src/client/components/DBGetForm/DBGetForm.js"],"names":["React","axios","DisplayBlog","DBPostForm","props","id","setID","useState","name","setName","city","setCity","blogData","setBlogData","SampName","SampCity","dbGet","get","then","res","console","log","data","map","arr","newArray","push","SampBlog","handleSubmit","event","preventDefault","displayBlogs","i","render","n","target","value"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./DBGetForm.css\";\nimport axios from \"axios\";\nimport DisplayBlog from '../DisplayBlog/DisplayBlog'\n\nexport default function DBPostForm(props) {\n\n  //improvement suggestion - could our state could be stored directly in a blogger object?\n  var [id, setID] = React.useState(\"\");\n  var [name, setName] = React.useState([\"test1\", \"test2\"]); // mock data for testing\n  var [city, setCity] = React.useState(\"\");\n  const [blogData, setBlogData] = React.useState([\n    {\n    SampName: \"test1\",\n    SampCity: \"This is my city\"\n  },\n  {\n    SampName: \"Test1\",\n    SampCity: \"This is my other city\"\n  }\n  ])\n\n  const dbGet = (id) => {\n    axios\n      .get(`http://localhost:3001/blogger/${id}`)\n      .then((res) => {\n        console.log(res)\n        console.log(res.data[0].city)\n        console.log(res.data[1].city)\n        \n        const data = res.data\n\n        data.map((arr) => {\n          console.log(arr)\n        })\n        console.log(data)\n\n        // Object.keys(res.data).map((property, i) => {\n        //   // console.log(property.[i])\n        //   console.log(i)\n        //   // Access each object here by using response[property]...\n        // })\n    \n        // setName(res.data.name)\n        // setCity(res.data.city)\n        \n        // create array of objects w/ returned blog data\n        const newArray = [];\n        newArray.push({ \n          SampName: res.data.name,\n          SampCity: res.data[0].city,\n          SampBlog: \"\"\n        })\n        console.log(newArray)\n        setBlogData(newArray)\n      }); \n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();   \n    dbGet(id);\n    // No logo on the submit blog page so I have removed it.\n    // props.logoSpeedUp();\n  };\n  \n  const displayBlogs = (data, i) => {\n    //mapping through an array of objects to allow mutliple blogs to be returned.\n    const render = []\n\n    data.map((blogData) => {\n      // console.log(blogData.SampName)\n      return render.push(<DisplayBlog nameprop={blogData.SampName} cityprop={blogData.SampCity} blogprop={blogData.SampBlog} />) \n    })\n    return render;\n  }\n\n  return (\n    <div className=\"DBGetForm\">\n      <h3>Get a record from the database:</h3>\n      <form onSubmit={handleSubmit}>\n        <label>\n          Blogger ID:\n          <input\n            type=\"id\"\n            name=\"id\"\n            value={id}\n            onChange={(n) => setID(n.target.value)}\n            required\n          />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div className=\"dbDisplay\">\n        Name: {name}\n      </div>\n      <div className=\"dbDisplay\">\n        City: {city}\n      </div>\n      {displayBlogs(blogData)}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}